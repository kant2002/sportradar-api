// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.SportRadar.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SportEventStatus
    {
        /// <summary>
        /// Initializes a new instance of the SportEventStatus class.
        /// </summary>
        public SportEventStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SportEventStatus class.
        /// </summary>
        public SportEventStatus(string status, int homeScore, int awayScore, string matchStatus = default(string), string winnerId = default(string), IList<PeriodScore> periodScores = default(IList<PeriodScore>))
        {
            Status = status;
            MatchStatus = matchStatus;
            HomeScore = homeScore;
            AwayScore = awayScore;
            WinnerId = winnerId;
            PeriodScores = periodScores;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "match_status")]
        public string MatchStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "home_score")]
        public int HomeScore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "away_score")]
        public int AwayScore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "winner_id")]
        public string WinnerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "period_scores")]
        public IList<PeriodScore> PeriodScores { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (PeriodScores != null)
            {
                foreach (var element in PeriodScores)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
